Fast, thread safe map implementation with a few tests and examples.

I've also included a not too bad layman's malloc implementation.

Note:
Before compiling, if using my makefiles, source the 'env.sh' file first.


Performance:

I used the included tests to compare performance with c++ std::map.

Results:

    For 500000 elements (both tests compiled with -O2, ran on Ryzen 1700X, VBox):

    Initialization:
    - create a key
    - delete the key
    - add back the key
    - repeat for each element

    Access:
    - iterate over each element, checking corresponding value is not NULL

    c++ std::map
        [500000] Map init time: 1.05 seconds
        [500000] Access time: 0.01 seconds

    c tmap (malloc):

        [500000] Map init time: 1.03 seconds
        [500000] Access time:   0.20 seconds


This has been working fine in the following environment:

    clang 3.8
        clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)
        Target: x86_64-pc-linux-gnu
        Thread model: posix
        InstalledDir: /usr/bin
        Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0
        Found candidate GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/6.0.0
        Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/5.4.0
        Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6.0.0
        Selected GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/5.4.0
        Candidate multilib: .;@m64
        Selected multilib: .;@m64

    Following Ubuntu distro with latest updates as of 2019-12-31:

    No LSB modules are available.
    Distributor ID: Ubuntu
    Description:    Ubuntu 16.04.6 LTS
    Release:    16.04
    Codename:   xenial


COMPILATION PARAMETERS

    You can override the following macros during compilation:
    (for example: FAST_MAP=1 make)

    QADEBUG

        If defined and using malloc override, statistics on malloc usage will be outputted
        when libmyalloc.so is unloaded (program exits).

    FAST_MAP

        If defined, memory release will only be done for a given map when 'tfree' is
        called, giving a =~ 25% speed performance improvement.

    FAST_ALLOC

        If defined and using malloc override, memory won't be freed until the program
        exits (or you've hogged all the memory!).

    NODE_BLOCK_NB_ELEMENTS

        Number of map elements pre allocated each time we run out of allocated memory.

        Sweet spot is between 2048 and 4096

        for i in 32 64 128 256 512 1024 2048 4096 8000 16000 32000 64000 128000; do
            export CCFLAGS=-DNODE_BLOCK_NB_ELEMENTS=$i;
            make >/dev/null 2>&1;
            echo "NODE BLOCK SIZE: $i";
            out/maptest -t p -e 1000000 2>&1 |  grep 'Map init';
        done

        NODE BLOCK SIZE: 32
        [1000000] Map init time: 1.98 seconds
        NODE BLOCK SIZE: 64
        [1000000] Map init time: 1.87 seconds
        NODE BLOCK SIZE: 128
        [1000000] Map init time: 1.87 seconds
        NODE BLOCK SIZE: 256
        [1000000] Map init time: 1.89 seconds
        NODE BLOCK SIZE: 512
        [1000000] Map init time: 1.87 seconds
        NODE BLOCK SIZE: 1024
        [1000000] Map init time: 1.88 seconds
        NODE BLOCK SIZE: 2048
        [1000000] Map init time: 1.81 seconds
        NODE BLOCK SIZE: 4096
        [1000000] Map init time: 1.85 seconds
        NODE BLOCK SIZE: 8000
        [1000000] Map init time: 1.82 seconds
        NODE BLOCK SIZE: 16000
        [1000000] Map init time: 2.02 seconds
        NODE BLOCK SIZE: 32000
        [1000000] Map init time: 1.95 seconds
        NODE BLOCK SIZE: 64000
        [1000000] Map init time: 2.01 seconds
        NODE BLOCK SIZE: 128000
        [1000000] Map init time: 2.05 seconds
